#!/bin/env bash

DOTFILES=${DOTFILES:-${HOME}/.dotfiles}

__required_packages=(
  "qt6-qtwayland" "qt5-qtwayland" "alacritty" "kvantum" "polkit-kde" "hyprpicker"
  "hyprland" "sddm" "ripgrep" "plocate" "eza" "fzf" "git" "nodejs" "zsh" "wlogout"
  "gh" "bat" "feh" "zathura" "zathura-pdf-poppler" "waybar" "symlinks" "trash-cli"
  "neovim" "fd-find" "exiftool" "zsh-autosuggestions" "zsh-syntax-highlighting"
)

__development_packages=(
  "freetype-devel" "cairo-devel" "pango-devel" "wayland-devel" "libxkbcommon-devel"
  "scdoc" "harfbuzz" "wayland-protocols-devel" "meson" "ninja" "rustc" "cargo" "rustup"
)

__theming_tools=(
  "kvantum-qt5" "lxappearance" "gnome-tweaks" "qt6ct" "qt5ct"
)

__groups=(
  "multimedia" "fonts" "vlc"
)

function __logger {
  local __normal='\033[0m'
  local __red='\033[1;31m'
  local __yellow='\033[1;33m'
  local __blue='\033[1;34m'

  case "$1" in
    --info) echo -e "${__blue}[info]${__normal}: $2" ;;
    --warning) echo -e "${__yellow}[warning]${__normal}: $2" >&2 ;;
    --error) echo -e "${__red}[error]${__normal}: $2" >&2 ;;
  esac
}

function __linker {
  local __skip=false
  case "$1" in
    --skip) __skip=true;;
    --backup) __skip=false;;
    *)
      __logger --error 'invalid argument for __linker'
      exit 1;;
  esac

  local __target="${HOME}/${2//"${DOTFILES}/"}"

  if ! [[ -d "$(dirname "${__target}")" ]]; then
    mkdir -p "$(dirname "${__target}")"
  fi

  if [[ -e "$__target" ]]; then
    __logger --error "$__target already exists"
    if $__skip; then
      __logger --info "skipping..."
      return
    fi
    __logger --warning "backing up $__target -> $__target.bak"
    mv "$__target" "$__target.bak"
  fi

  __logger --info "creating link $2 -> $__target"
  ln -s "$2" "$__target"
}

function __link_config {
  __logger --info "linking configs"

  for __conf in "${DOTFILES}"/.config/*; do
    __linker --backup "${__conf}"
  done

  for __bin in "${DOTFILES}"/.local/bin/*; do
    __linker --skip "${__bin}"
  done

  for __app in "${DOTFILES}"/.local/share/applications/*; do
    __linker --backup "${__app}"
  done

  for __conf in "${DOTFILES}"/.ipython/profile_default/*; do
    __linker --backup "${__conf}"
  done

  __linker --backup "${DOTFILES}/.zshrc"
  __linker --backup "${DOTFILES}/.bashrc"
  __linker --backup "${DOTFILES}/.gitconfig"
  __linker --backup "${DOTFILES}/.bash_profile"
}

function __install_packages {
  # check OS
  if [[ "$(grep -E '^ID=.*$' '/etc/os-release' | cut -d= -f2)" != "fedora" ]]; then
    __logger --error 'not fedora. skipping package installation...'
    return 0
  fi

  # check dnf5
  if ! command -v dnf5 &>/dev/null; then
    __logger --info "installing dnf5"
    sudo dnf install dnf5 --refresh --assumeyes
  fi

  # enable rpm fusion
  __logger --info "enabling rpm fusion repos"
  sudo dnf install \
    "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" \
    "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm" --assumeyes
  sudo dnf config-manager --enable 'fedora-cisco-openh264' --assumeyes

  # install dnf packages
  __logger --info "refreshing cache"
  sudo dnf5 makecache --refresh -y
  __logger --info "updating packages"
  sudo dnf5 upgrade --setopt='max_parallel_downloads=10' --assumeyes

  __logger --info "installing required packages"
  sudo dnf5 install "${__required_packages[@]}" --setopt='max_parallel_downloads=10' --assumeyes
  __logger --info "installing theming tools and development packages"
  sudo dnf5 install "${__theming_tools[@]}" "${__development_packages[@]}" --setopt='max_parallel_downloads=10' --setopt='install_weak_deps=False' --assumeyes
  __logger --info "installing required groups"
  sudo dnf5 group install "${__groups[@]}" --setopt='max_parallel_downloads=10' --with-optional --assumeyes

  # install tofi
  __logger --info "installing tofi"
  mkdir -p '/tmp/tofi'
  git clone --depth=1 'https://github.com/philj56/tofi.git' '/tmp/tofi'
  cd /tmp/tofi || { __logger --error 'tofi installation failed' ; exit 1; }
  meson build && ninja -C build install
}

function usage {
  echo "Usage: install [OPTIONS]"
  echo ""
  echo "Options:"
  echo " --help, -h    Display this help message and exit"
  echo " --no-package  Do not install dnf packages"
}

function main {
  local install_packages=true
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h | --help ) 
        usage
        exit 0
        ;;
      --no-package )
        install_packages=false
        ;;
      * )
        __logger --error "invalid option: $1" >&2
        echo ""
        usage
        exit 1
        ;;
    esac
    shift
  done

  if "$install_packages"; then
    __install_packages
  fi

  if ! [[ -e "$DOTFILES" ]]; then
    mkdir -p "$DOTFILES"

    if ! command -v git &>/dev/null; then
      __logger --error 'git not found. could not clone dotfiles'
      exit 1
    fi
    git clone 'https://github.com/Rid1-fz-06/.dotfiles.git' "$DOTFILES"
  fi

  __link_config
}

main "$@"
